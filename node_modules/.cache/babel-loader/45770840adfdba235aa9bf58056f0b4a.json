{"ast":null,"code":"import _slicedToArray from \"/Users/jeffersonm./Code Projects/3D-research/cannon-js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jeffersonm./Code Projects/3D-research/cannon-js/src/useCannon.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as CANNON from \"cannon\";\nimport React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\"; // Cannon-world context provider\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar context = /*#__PURE__*/React.createContext();\nexport function Provider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  // Set up physics\n  var _useState = useState(function () {\n    return new CANNON.World();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      world = _useState2[0];\n\n  log;\n  useEffect(function () {\n    world.broadphase = new CANNON.NaiveBroadphase();\n    world.solver.iterations = 10;\n    world.gravity.set(0, 0, -25);\n  }, [world]); // Run world stepper every frame\n\n  useFrame(function () {\n    return world.step(1 / 60);\n  }); // Distribute world via context\n\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: world,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n} // Custom hook to maintain a world physics body\n\n_s(Provider, \"qAQ95cvRkzgBQoY01PTBpNzW4tc=\", false, function () {\n  return [useFrame];\n});\n\n_c = Provider;\nexport function useCannon(_ref2, fn) {\n  _s2();\n\n  var props = Object.assign({}, _ref2);\n  var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var ref = useRef(); // Get cannon world object\n\n  var world = useContext(context); // Instanciate a physics body\n\n  var _useState3 = useState(function () {\n    return new CANNON.Body(props);\n  }),\n      _useState4 = _slicedToArray(_useState3, 1),\n      body = _useState4[0];\n\n  useEffect(function () {\n    // Call function so the user can add shapes\n    fn(body); // Add body to world on mount\n\n    world.addBody(body); // Remove body on unmount\n\n    return function () {\n      return world.removeBody(body);\n    };\n  }, deps);\n  useFrame(function () {\n    if (ref.current) {\n      // Transport cannon physics into the referenced threejs object\n      ref.current.position.copy(body.position);\n      ref.current.quaternion.copy(body.quaternion);\n    }\n  });\n  return ref;\n}\n\n_s2(useCannon, \"zy8orWBdPwFfUV+I4qoLevKJjWU=\", false, function () {\n  return [useFrame];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/jeffersonm./Code Projects/3D-research/cannon-js/src/useCannon.js"],"names":["CANNON","React","useState","useEffect","useContext","useRef","useFrame","context","createContext","Provider","children","World","world","log","broadphase","NaiveBroadphase","solver","iterations","gravity","set","step","useCannon","fn","props","deps","ref","Body","body","addBody","removeBody","current","position","copy","quaternion"],"mappings":";;;;;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,mBAAzB,C,CAEA;;;AACA,IAAMC,OAAO,gBAAGN,KAAK,CAACO,aAAN,EAAhB;AACA,OAAO,SAASC,QAAT,OAAgC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACrC;AACE,kBAAgBR,QAAQ,CAAC;AAAA,WAAM,IAAIF,MAAM,CAACW,KAAX,EAAN;AAAA,GAAD,CAAxB;AAAA;AAAA,MAAOC,KAAP;;AACAC,EAAAA,GAAG;AACLV,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,KAAK,CAACE,UAAN,GAAmB,IAAId,MAAM,CAACe,eAAX,EAAnB;AACAH,IAAAA,KAAK,CAACI,MAAN,CAAaC,UAAb,GAA0B,EAA1B;AACAL,IAAAA,KAAK,CAACM,OAAN,CAAcC,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAC,EAAzB;AACD,GAJQ,EAIN,CAACP,KAAD,CAJM,CAAT,CAJqC,CAUrC;;AACAN,EAAAA,QAAQ,CAAC;AAAA,WAAMM,KAAK,CAACQ,IAAN,CAAW,IAAI,EAAf,CAAN;AAAA,GAAD,CAAR,CAXqC,CAYrC;;AACA,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAER,KAAzB;AAAgC,IAAA,QAAQ,EAAEF;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;GAhBgBD,Q;UAWdH,Q;;;KAXcG,Q;AAiBhB,OAAO,SAASY,SAAT,QAAiCC,EAAjC,EAAgD;AAAA;;AAAA,MAAxBC,KAAwB;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACrD,MAAMC,GAAG,GAAGpB,MAAM,EAAlB,CADqD,CAErD;;AACA,MAAMO,KAAK,GAAGR,UAAU,CAACG,OAAD,CAAxB,CAHqD,CAIrD;;AACA,mBAAeL,QAAQ,CAAC;AAAA,WAAM,IAAIF,MAAM,CAAC0B,IAAX,CAAgBH,KAAhB,CAAN;AAAA,GAAD,CAAvB;AAAA;AAAA,MAAOI,IAAP;;AACAxB,EAAAA,SAAS,CAAC,YAAM;AACd;AACAmB,IAAAA,EAAE,CAACK,IAAD,CAAF,CAFc,CAGd;;AACAf,IAAAA,KAAK,CAACgB,OAAN,CAAcD,IAAd,EAJc,CAKd;;AACA,WAAO;AAAA,aAAMf,KAAK,CAACiB,UAAN,CAAiBF,IAAjB,CAAN;AAAA,KAAP;AACD,GAPQ,EAONH,IAPM,CAAT;AASAlB,EAAAA,QAAQ,CAAC,YAAM;AACb,QAAImB,GAAG,CAACK,OAAR,EAAiB;AACf;AACAL,MAAAA,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBC,IAArB,CAA0BL,IAAI,CAACI,QAA/B;AACAN,MAAAA,GAAG,CAACK,OAAJ,CAAYG,UAAZ,CAAuBD,IAAvB,CAA4BL,IAAI,CAACM,UAAjC;AACD;AACF,GANO,CAAR;AAQA,SAAOR,GAAP;AACD;;IAxBeJ,S;UAedf,Q","sourcesContent":["import * as CANNON from \"cannon\"\nimport React, { useState, useEffect, useContext, useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\n\n// Cannon-world context provider\nconst context = React.createContext()\nexport function Provider({ children }) {\n  // Set up physics\n    const [world] = useState(() => new CANNON.World())\n    log\n  useEffect(() => {\n    world.broadphase = new CANNON.NaiveBroadphase()\n    world.solver.iterations = 10\n    world.gravity.set(0, 0, -25)\n  }, [world])\n\n  // Run world stepper every frame\n  useFrame(() => world.step(1 / 60))\n  // Distribute world via context\n  return <context.Provider value={world} children={children} />\n}\n\n// Custom hook to maintain a world physics body\nexport function useCannon({ ...props }, fn, deps = []) {\n  const ref = useRef()\n  // Get cannon world object\n  const world = useContext(context)\n  // Instanciate a physics body\n  const [body] = useState(() => new CANNON.Body(props))\n  useEffect(() => {\n    // Call function so the user can add shapes\n    fn(body)\n    // Add body to world on mount\n    world.addBody(body)\n    // Remove body on unmount\n    return () => world.removeBody(body)\n  }, deps)\n\n  useFrame(() => {\n    if (ref.current) {\n      // Transport cannon physics into the referenced threejs object\n      ref.current.position.copy(body.position)\n      ref.current.quaternion.copy(body.quaternion)\n    }\n  })\n\n  return ref\n}\n"]},"metadata":{},"sourceType":"module"}